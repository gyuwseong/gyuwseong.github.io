{"componentChunkName":"component---src-templates-post-jsx","path":"/custom-repository/","result":{"data":{"site":{"siteMetadata":{"title":"gyuwseong"}},"markdownRemark":{"id":"3bdccf81-ee85-54e6-a829-ec21f0fcba6e","excerpt":"개인 코드 스타일을 드러낼 작은 프로젝트를 진행하면서, 기존에 사용했던 Sequelize 대신 Typeorm 을 적용해 보고 있다. 아직 시작한 지 얼마 되지 않아서 적응 중이고, 딥한 레벨의 로직을 구현하지 않았기 때문에 아주 큰 차이점을 느끼진 못했지만, ORM 에서 레이어 분리를 위해 자주 사용하는 repository 를 구현할 때의 차이점을 기록해…","html":"<p>개인 코드 스타일을 드러낼 작은 프로젝트를 진행하면서, 기존에 사용했던 <a href=\"https://sequelize.org\">Sequelize</a> 대신 <a href=\"https://typeorm.io\">Typeorm</a> 을 적용해 보고 있다.</p>\n<p>아직 시작한 지 얼마 되지 않아서 적응 중이고, 딥한 레벨의 로직을 구현하지 않았기 때문에 아주 큰 차이점을 느끼진 못했지만, ORM 에서 레이어 분리를 위해 자주 사용하는 repository 를 구현할 때의 차이점을 기록해 보는 포스팅이다.</p>\n<h2 id=\"Sequelize-custom-repository\" style=\"position:relative;\"><a href=\"#Sequelize-custom-repository\" aria-label=\"Sequelize custom repository permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a><strong>Sequelize custom repository</strong></h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// UserRepository.ts</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">InjectModel</span></span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> repository<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> User<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">findUserById</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>sequelize 에서는 <code class=\"language-text\">@Injectable()</code> 데코레이터를 통해 <code class=\"language-text\">UserRepository</code> 클래스를 NestJS 컨테이너에 등록하고 관리한다.</li>\n<li>클래스의 생성자에서 <code class=\"language-text\">@InjectModel(User)</code> 데코레이터를 사용하여 User 모델을 주입받는다.</li>\n</ul>\n<p> </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// UserModel.ts</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Table</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> tableName<span class=\"token operator\">:</span> <span class=\"token string\">'user'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span></code></pre></div>\n<ul>\n<li>이때 <code class=\"language-text\">@Table</code> 데코레이터를 통해 <code class=\"language-text\">User</code> 테이블과 <code class=\"language-text\">User</code> 모델이 맵핑되기 때문에 User 모델을 주입받을 수 있다.</li>\n</ul>\n<p> </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// UserModule.ts</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>SequelizeModule<span class=\"token punctuation\">.</span><span class=\"token function\">forFeature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>UserRepository<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UseRepositoryModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">SequelizeModule.forFeature</code> 를 통해 repository 를 NestJS 모듈 DI 에 등록하면 다른 서비스나 모듈에서도 해당 repository 를 주입받아 사용할 수 있다.</li>\n</ul>\n<p> </p>\n<p> </p>\n<h2 id=\"TypeORM-custom-repository\" style=\"position:relative;\"><a href=\"#TypeORM-custom-repository\" aria-label=\"TypeORM custom repository permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a><strong>TypeORM custom repository</strong></h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// UserRepository.ts</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Repository<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> dataSource<span class=\"token operator\">:</span> DataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">createEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">findOneById</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">findOneBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 방식은 <a href=\"https://gist.github.com/anchan828/9e569f076e7bc18daf21c652f7c3d012?permalink_comment_id=4319458#gistcomment-4319458\">여기</a>에서 찾은 방식인데, 본문에 소개된 <code class=\"language-text\">@CustomRepository</code> 방식보다 더 직관적이고 깔끔해서 이 방식으로 적용했다.</p>\n<ul>\n<li><code class=\"language-text\">Repository</code> 클래스를 상속받는 자식 클래스에서 <code class=\"language-text\">DataSource</code> 를 주입 받고, 생성자를 호출하면서 <code class=\"language-text\">UserRepository</code> 를 생성한다.</li>\n<li>TypeORM 은 repository 클래스를 생성 시 <code class=\"language-text\">EntityTarget</code> 과 <code class=\"language-text\">EntityManager</code> 를 생성하는데, <code class=\"language-text\">EntityTarget</code> 은 클래스가 다룰 타겟 <code class=\"language-text\">entity</code> 이고, <code class=\"language-text\">EntityManager</code> 는 데이터베이스 통신 작업을 수행하는 컴포넌트이다.</li>\n<li><code class=\"language-text\">DataSource</code> 는 데이터베이스 연결 및 <code class=\"language-text\">EntityManager</code> 생성을 관리하기 때문에 <code class=\"language-text\">DataSource</code> 를 주입받아서 <code class=\"language-text\">Custom Repository</code> 와 <code class=\"language-text\">EntityManager</code> 를 생성하고, 해당 <code class=\"language-text\">EntityManager</code> 를 통해 데이터베이스 작업을 수행하는 방식으로 동작한다.</li>\n</ul>\n<p> </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// UserModule.ts</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forFeature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>User<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>UserRepository<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">TypeOrmModule.forFeature</code> 를 통해 repository 를 NestJS 모듈 DI 에 등록하면 다른 서비스나 모듈에서도 해당 repository 를 주입받아 사용할 수 있다.</li>\n</ul>","frontmatter":{"title":"Custom repository 적용하기 (feat. Sequelize, TypeORM)","date":"June 04, 2024","update":"June 04, 2024","tags":["조각글"],"series":null},"fields":{"slug":"/custom-repository/","readingTime":{"minutes":3.115}}},"seriesList":{"edges":[{"node":{"id":"df9dfe4a-14ef-52df-8f36-06d199c90656","fields":{"slug":"/understanding-jvm/"},"frontmatter":{"title":"JVM 이해하기"}}},{"node":{"id":"d078781e-ce36-55d1-af07-598e0b000d92","fields":{"slug":"/leetcode-3sum/"},"frontmatter":{"title":"leetcode 15. 3Sum"}}},{"node":{"id":"e551e659-5a38-5541-91a6-c8ff96915d0d","fields":{"slug":"/blog-migration/"},"frontmatter":{"title":"블로그 옮기기"}}},{"node":{"id":"356ea60d-b20c-5ad8-92ea-413c2fdb3a81","fields":{"slug":"/gatsby-version-ps/"},"frontmatter":{"title":"종속성 문제 해결하기"}}},{"node":{"id":"96b29891-a242-5bbf-9728-56799a9f3cc1","fields":{"slug":"/minimum-spanning-tree/"},"frontmatter":{"title":"최소비용 신장 트리 (Minimum Spanning Tree)"}}},{"node":{"id":"3bdccf81-ee85-54e6-a829-ec21f0fcba6e","fields":{"slug":"/custom-repository/"},"frontmatter":{"title":"Custom repository 적용하기 (feat. Sequelize, TypeORM)"}}},{"node":{"id":"4f6f3366-663a-50df-aae8-f021f6b50c10","fields":{"slug":"/asynchronous-programming/"},"frontmatter":{"title":"비동기 프로그래밍"}}},{"node":{"id":"1040970d-b85f-527c-8ffa-b8a426e61197","fields":{"slug":"/boj-1181/"},"frontmatter":{"title":"input() vs sys.stdin.readline()"}}},{"node":{"id":"f7881a3e-b687-5510-8bfd-450faae1b187","fields":{"slug":"/boj-18110/"},"frontmatter":{"title":"python round() 와 반올림"}}},{"node":{"id":"e515c0a9-2a33-552f-901e-bd8b61db7c74","fields":{"slug":"/spring-container/"},"frontmatter":{"title":"스프링 컨테이너와 빈"}}},{"node":{"id":"54e07400-3ae1-5858-9c8e-4e98d0deb327","fields":{"slug":"/localstack-testing/"},"frontmatter":{"title":"Localstack 으로 DynamoDB + Lambda testing 해보기"}}},{"node":{"id":"4c97f39d-ad6a-5f1b-8e31-93d6a9853a86","fields":{"slug":"/what-is-index/"},"frontmatter":{"title":"인덱스 (Index)"}}}]},"previous":{"fields":{"slug":"/minimum-spanning-tree/"},"frontmatter":{"title":"최소비용 신장 트리 (Minimum Spanning Tree)"}},"next":{"fields":{"slug":"/asynchronous-programming/"},"frontmatter":{"title":"비동기 프로그래밍"}}},"pageContext":{"id":"3bdccf81-ee85-54e6-a829-ec21f0fcba6e","series":null,"previousPostId":"96b29891-a242-5bbf-9728-56799a9f3cc1","nextPostId":"4f6f3366-663a-50df-aae8-f021f6b50c10"}},"staticQueryHashes":[],"slicesMap":{}}